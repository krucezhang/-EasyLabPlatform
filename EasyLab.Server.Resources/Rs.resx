<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CANNOT_BEGIN_NEW_TRANSACTION_WHILE_A_TRANSACTION_IS_RUNNING" xml:space="preserve">
    <value>Cannot begin a new transaction while an existing transaction is still running.
Please commit or rollback the existing transaction before starting a new one.</value>
  </data>
  <data name="CANNOT_COMMIT_TRANSACTION_WHILE_NO_TRANSACTION_IS_RUNNING" xml:space="preserve">
    <value>Cannot commit a transaction while there is no transaction running.</value>
  </data>
  <data name="CANNOT_ROLLBACK_TRANSACTION_WHILE_NO_TRANSACTION_IS_RUNNING" xml:space="preserve">
    <value>Cannot roll back a transaction while there is no transaction running.</value>
  </data>
  <data name="CANNOT_SAVE_WHILE_A_TRANSACTION_IS_RUNNING" xml:space="preserve">
    <value>A transaction is running. Call CommitTransaction instead.</value>
  </data>
  <data name="GETLABINSTRUMENTLISTINITERROR" xml:space="preserve">
    <value>Get init labs and instruments list error</value>
  </data>
  <data name="GETLABINSTRUMENTLISTINITSUCCESS" xml:space="preserve">
    <value>Get init labs and instruments list success</value>
  </data>
  <data name="GETUSERLISTERROR" xml:space="preserve">
    <value>Server return user list error</value>
  </data>
  <data name="GETUSERLISTSUCCESS" xml:space="preserve">
    <value>Get user list success</value>
  </data>
  <data name="INTERNAL_SERVICE_ERROR" xml:space="preserve">
    <value>An internal service error has occurred</value>
  </data>
  <data name="INVALID_IP_V4" xml:space="preserve">
    <value>Invalid IP v4 address</value>
  </data>
  <data name="INVALID_PASSWORD" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="INVALID_RESOURCE_ID" xml:space="preserve">
    <value>Invalida resources id</value>
  </data>
  <data name="LOG_MESSAGE_AUDIT_LOG_CONTENT" xml:space="preserve">
    <value>Request content: auditlog id: {0}, ResourceType: {1}, ResourceAction: {2}, ResourceValue: {3}</value>
  </data>
  <data name="LOG_MESSAGE_COUNT" xml:space="preserve">
    <value>Get {0} message(s).</value>
  </data>
  <data name="LOG_MESSAGE_FAILED_WITH_EXCEPTION" xml:space="preserve">
    <value>Error while processing message id={0} : {1}</value>
  </data>
  <data name="LOG_MESSAGE_GLOBAL_SETTING_NOT_READY" xml:space="preserve">
    <value>Global Setting is not ready, stop processing message.</value>
  </data>
  <data name="LOG_MESSAGE_INVALID_TYPE" xml:space="preserve">
    <value>Unknown message type {0} in message {1}.</value>
  </data>
  <data name="LOG_MESSAGE_NETWORK_NOT_AVAILABLE" xml:space="preserve">
    <value>Network connection is not available, stop processing message.</value>
  </data>
  <data name="LOG_MESSAGE_START_PROCESS" xml:space="preserve">
    <value>Start processing messages.</value>
  </data>
  <data name="LOG_NETWORK_NOT_AVAILABLE" xml:space="preserve">
    <value>Network connection is not available, stop processing message.</value>
  </data>
  <data name="LOG_SERVICE_CLIENT_REQUEST_CONTENT" xml:space="preserve">
    <value>Requesting {0} ..</value>
  </data>
  <data name="LOG_SERVICE_CLIENT_RESPONSE_CONTENT" xml:space="preserve">
    <value>Response is: {0}</value>
  </data>
  <data name="MESSAGE_INVALID_AUDITLOG_ID" xml:space="preserve">
    <value>Invalid auditLog id [{0}] in message [{1}], message type is [{2}]</value>
  </data>
  <data name="MESSAGE_LOGIN_FALSE" xml:space="preserve">
    <value>Do not authority process message</value>
  </data>
  <data name="MUST_NOT_BE_BLANK" xml:space="preserve">
    <value>Must not be blank</value>
  </data>
  <data name="MUST_NOT_BE_EMPTY" xml:space="preserve">
    <value>Must not be empty</value>
  </data>
  <data name="REQUEST_FORBIDDEN" xml:space="preserve">
    <value>The request is forbidden on server.</value>
  </data>
  <data name="REQUIRED_FIELD_EMPTY" xml:space="preserve">
    <value>Required field empty</value>
  </data>
  <data name="REQUIRED_FIELD_MISSING" xml:space="preserve">
    <value>Required field missing</value>
  </data>
  <data name="REQUIRED_FIELD_MISSING_OR_EMPTY" xml:space="preserve">
    <value>Required field missing or empty</value>
  </data>
  <data name="VALUE_TOO_LONG" xml:space="preserve">
    <value>Value too long (max length {0})</value>
  </data>
  <data name="VERITY_LAB_MANAGER_ERROR" xml:space="preserve">
    <value>lab manager login error when system verity and error is {0}</value>
  </data>
  <data name="VERITY_RESERVE_QUEUE_ERROR" xml:space="preserve">
    <value>Reserve's queue display error</value>
  </data>
</root>